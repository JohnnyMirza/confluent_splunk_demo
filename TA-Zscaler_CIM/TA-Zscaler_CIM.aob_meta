{"basic_builder": {"appname": "TA-Zscaler_CIM", "friendly_name": "Zscaler Add-On for Splunk", "version": "3.1.2", "author": "Scott Bullock", "description": "Add-on bring Zscaler indexed data into CIM compliance - Call on Zscaler API's", "theme": "#38b8bf", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAJAAAAAAqDuP8AAAD8UlEQVRYCe1WOUwUURj+htnlkAUUMVGBxohHNEETvKIC2tiYaCxtLEyMBoM2ChgLDSpoYUyMhkILtbEwosZoYYJABJd4RCIeqJB4IIZjMSwsG9aZ8f/fHjOzs+wsYkGxb4p3/P/73/e+/3gj4XiThlnUUmYRFgElCcjOI0mGkgzZMWAnd9gpJCKXICFFCmqq0KDNoLL9MyDOhjdH12H1wkyCQ02SCAp1hEahnuWuE63wqSqNEm/TBKRBpoO9tWXIcFoTlIFpIbbONX3FikUuLMtLx+3OgYQRxQXErkilc/eVLELxYhcevBvEo/3F5J6QfwzHMDsFtW34NT4J1eCy132jBi37oRTrLZPIoJMO9dWVQQ4HxxS2VHJRTk0zxvx/kJWdhiW5Gejs95LryIVW3FNY0ZdjMnRp11JUbi4gLXuLPcN+jNaVcwgJZq4+70PlvbEIGGZT4zjiUJKDcaYfbx1ZAK2cn05gCq2aU6wUUYww8CvtP3D4/mcaUZYRiPaKtViXnwMHgTA2ZnRgLICCs21QDK4N61hcptbzbc1GwsrWXhOsOKqbSUTWad/vU1uRnS4HM47gMYCpYs5Z/VTsN+IyMZTmoDBOEAydgydfRrDjWidh0Sj4JfjpMkPjf7C03o0ejx8yu4hxElzVH8DguXLkznHQnD9gsm4bHATK2EyA+k9uNsrijDWceNyL+pZvQofNF7hSIVc1C2ZCi1CM6ZbmQN7pZ8iltB2uLSWVYDHNy3RicDwQOctUTFypJnwRJdOAbtz4bigChmWcTb3eSR2MaYN54plUMTLBpTPYmg+uCQ9FbwIUSKCq8uF7bnaZjIQnokKwjxRKKU0VRTQsM/ZzM/SLv/rhNYqIN8M/dTr53He2LE4cUaWmANY9wc5ScWRLIS7uLBKGo0OQcg5v+saw91YXVNrYVbURTlnnIUW4mS4RajpUWvCLPORwi906vnsJDMvpgSAmPh7bgGUL5sRWDq0y5LX5WfhQvcmit/y8myzpYFhBhxpSl6uaolR0O5suv6SJhnlOGcr57bZg9J36SKOLNLh/gpn55JnQBaGRBRAXNc4WJVY8kWx9oQueM6VccqbdGjr6kEIuP9TYbWEmbMwCiAVMo6OmBasuuOELKGJ+sfUbNhZmoaOiJLx3Wn0vsXHobrftHlMMRWu/H55A5snWyDKTMuJXMI8qMVPE3rcjii934E43rr/oT0Cb7RmyLHJynAEHqXBXqASX0A+am37U2MPiiSCECsn4v2n3jbd4+H5IvKtxTJpE0wZk2h01EQ8rA6Z1c+5EKcaZxoyhOPpxRfy3yO1fwfDe/wqIDc60JQHZMZhkKMmQHQN28r/s40HSQNsRjwAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.0.0", "tab_build_no": "0", "build_no": 11}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "zscalerapi-zia-audit", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "zscaler_audit_logs", "title": "Zscaler Audit Logs", "description": "", "type": "customized", "parameters": [{"name": "cloud", "label": "Zscaler Cloud", "help_string": "", "required": true, "possible_values": [{"value": "zscaler", "label": "zscaler.net"}, {"value": "zscalerone", "label": "zscalerone.net"}, {"value": "zscalertwo", "label": "zscalertwo.net"}, {"label": "zscalerthree.net", "value": "zscalerthree"}, {"label": "zscloud.net", "value": "zscloud"}, {"label": "zscalergov.net", "value": "zscalergov"}, {"label": "zscalerbeta.net", "value": "zscalerbeta"}], "format_type": "dropdownlist", "default_value": "", "placeholder": "", "type": "dropdownlist", "value": ""}, {"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "cloud", "title": "Zscaler Cloud", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "zscaler", "label": "zscaler.net"}, {"value": "zscalerone", "label": "zscalerone.net"}, {"value": "zscalertwo", "label": "zscalertwo.net"}, {"label": "zscalerthree.net", "value": "zscalerthree"}, {"label": "zscloud.net", "value": "zscloud"}, {"label": "zscalergov.net", "value": "zscalergov"}, {"label": "zscalerbeta.net", "value": "zscalerbeta"}], "format_type": "dropdownlist", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport xml\nimport zscaler_python_sdk\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # global_account = definition.parameters.get('global_account', None)\n    # cloud = definition.parameters.get('cloud', None)\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg('global_account')\n    cloud = helper.get_arg('cloud')\n    api_key = global_account['api_key']\n    username = global_account['username']\n    password = global_account['password']\n    file = \"checkpoint\"\n\n    #Set envvars based on clear creds\n    #os.environ[\"ZIA_USERNAME\"] = username\n    #os.environ[\"ZIA_PASSWORD\"] = password\n    #os.environ[\"ZIA_API\"] = api_key\n\n    #API Login\n    helper.log_info(\"Login to Zscaler API: %s\" % username)\n\n    z = zscaler_python_sdk.zscaler()\n    z.get_settings_from_vars(username, password, api_key)\n    z.set_cloud(cloud)\n    z.authenticate_zia_api()\n\n    helper.log_info(\"Login Success\")\n\n    # Get Audit Report\n\n    #load starttime from checkpoint file\n    helper.log_debug(\"Loading Checkpoint: \" + file)\n    stime = helper.get_check_point(file)\n    #if we get no time for checpoint default to 10 mins ago\n    if(not stime):\n        #set strt time a week ago, end time now\n        helper.log_debug(\"Cant determine last execution time, using default [last 10 mins]\")\n        startOffset = 604800\n        stime = int(round(time.time() * 1000)-startOffset)-1000\n\n    etime = int(round(time.time() * 1000)) -1000\n\n    helper.log_info(\"Generating Report: \" + str(stime) + \"-\" + str(etime))\n    generate = z.generate_audit_report(stime, etime)\n    helper.log_info(\"Report generated status(\" + str(generate.status_code) + \") :\" + str(generate.text))\n        #\tprint(\"\\n\\n ##########  GENERATING API RESPONSE  ##########\")\n    #print(generate)\n    #if generate is \"Status Code: 204\":\n        #print(\"\\n\\n ##########  GENERATING AUDIT REPORT SUCCESS  ##########\\n\\n\" + generate)\n    #else:\n        #print(\"\\n\\n ##########  FAILED TO GENERATE REPORT  ##########\\n\\n\" + generate)\n        #return\n    \n    #if generate is not \"Status Code: 204\":\n    #\thelper.log_info(\"API Error: \" + str(generate.text))\n    #\treturn\n    \n    status = z.check_audit_status() \n    #print(status + \"\\n\")\n    \n    #don't try to download report while status is executing\n    #there's more response types for this call we could look to handle too.  \n    while status == \"EXECUTING\":\n        status=z.check_audit_status() \n        helper.log_info(\"Looping Audit Log still generating, ServerSideStatus=\" + status)\n        \n        time.sleep(1)\n\n    ew.log(\"INFO\",\"##########  AUDIT REPORT GENERATED  ##########\\n\\n\")\n\n    report = z.get_audit_report(\"json\")\n    helper.log_debug(\"REPORT: \" + report)\n    #event = helper.new_event(report)   \n    #ew.write_event(event)\n    logs = json.loads(report)\n\n    for log in logs:\n        helper.log_info(\"EVENT: \" + json.dumps(log))\n        event = helper.new_event(json.dumps(log)) \n        ew.write_event(event)\n\n\n    #for line in report:\n        #helper.log_debug(\"LINE: \" + line)\n\n        #if(key == \"log\"):\n            #for log in value:\n                #helper.log_debug(\"Log: \" + str(log))\n\n        #event = helper.new_event(line)\n        #ew.write_event(event)\n    \n\n    helper.log_debug(\"Saving Chekpoint: \" + file)\n    helper.save_check_point(file, etime)\n    \n\n    \n    '''\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n    '''\n\n\n    '''\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    '''\n", "customized_options": [{"name": "cloud", "value": ""}, {"name": "global_account", "value": ""}], "uuid": "158db597ad0d458682a76b4365da2857", "sample_count": "40381"}, {"index": "default", "sourcetype": "zscalerapi-zia-sandbox", "interval": "1200", "use_external_validation": true, "streaming_mode_xml": true, "name": "zscaler_sandbox_events", "title": "Zscaler Sandbox Events", "description": "", "type": "customized", "parameters": [{"name": "cloud", "label": "Zscaler Cloud", "help_string": "", "required": false, "possible_values": [{"value": "zscaler", "label": "zscaler.net"}, {"value": "zscalerone", "label": "zscalerone.net"}, {"value": "zscalertwo", "label": "zscalertwo.net"}, {"label": "zscalerthree.net", "value": "zscalerthree"}, {"label": "zscloud.net", "value": "zscloud"}, {"label": "zscalergov.net", "value": "zscalergov"}, {"label": "zscalerbeta.net", "value": "zscalerbeta"}], "format_type": "dropdownlist", "default_value": "zscaler", "placeholder": "", "type": "dropdownlist", "value": "zscaler"}, {"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "cloud", "title": "Zscaler Cloud", "description": "", "required_on_edit": false, "required_on_create": false, "possible_values": [{"value": "zscaler", "label": "zscaler.net"}, {"value": "zscalerone", "label": "zscalerone.net"}, {"value": "zscalertwo", "label": "zscalertwo.net"}, {"label": "zscalerthree.net", "value": "zscalerthree"}, {"label": "zscloud.net", "value": "zscloud"}, {"label": "zscalergov.net", "value": "zscalergov"}, {"label": "zscalerbeta.net", "value": "zscalerbeta"}], "format_type": "dropdownlist", "default_value": "zscaler", "placeholder": ""}, {"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport zscaler_python_sdk\nimport splunklib.results as results\nfrom splunklib.modularinput import *\nimport splunklib.client as client\nimport json\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # cloud = definition.parameters.get('cloud', None)\n    # apikey = definition.parameters.get('apikey', None)\n    # global_account = definition.parameters.get('global_account', None)\n    pass\n\ndef get_md5_list(sername, password, session_key):\n    args = {'token':session_key}\n    \n    #service = client.connect(host=\"127.0.0.1\", port=8089, username=\"zscaler\", password=\"fakepass\")\n    service = client.connect(**args)\n    kwargs_oneshot = {\"earliest_time\": \"-1h\", \"latest_time\": \"now\",}\n    searchquery_oneshot = \"| inputlookup zscaler-md5-lookup.csv | dedup md5\"\n    oneshotsearch_results = service.jobs.oneshot(searchquery_oneshot, **kwargs_oneshot)\n    return oneshotsearch_results\n    \n    '''\n    try:\n        service = client.connect(host=\"127.0.0.1\", port=8089, username=\"zscaler\", password=\"Zscal3r!\")\n        #service = client.connect(**args)\n        kwargs_oneshot = {\"earliest_time\": \"-1h\", \"latest_time\": \"now\",}\n        searchquery_oneshot = \"| inputlookup zscaler-md5-lookup.csv | dedup md5\"\n        oneshotsearch_results = service.jobs.oneshot(searchquery_oneshot, **kwargs_oneshot)\n        return oneshotsearch_results\n\n    except Exception as e:\n        raise Exception, \"Boo!: %s\" % str(e)\n    '''\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg('global_account')\n    cloud = helper.get_arg('cloud')\n    api_key = global_account['api_key']\n    username = global_account['username']\n    password = global_account['password']\n\n    # Get list of MD5's pending detonation\n    #session_key = helper.get_arg('session_key')\n    #input_name, input_items = inputs.inputs.popitem()\n    session_key = helper.context_meta['session_key']\n    #session_key = \"dummy\"\n    md5List = get_md5_list(username, password, session_key)\n\n    #Set envvars based on clear creds\n    #os.environ[\"ZIA_USERNAME\"] = username\n    #os.environ[\"ZIA_PASSWORD\"] = password\n    #os.environ[\"ZIA_API\"] = api_key\n\n    #API Login\n    helper.log_info(\"Login to Zscaler API: %s\" % username)\n\n    z = zscaler_python_sdk.zscaler()\n    z.get_settings_from_vars(username, password, api_key)\n    z.set_cloud(cloud)\n    z.authenticate_zia_api()\n\n    helper.log_info(\"Login Success\")\n\n    # Get the results and display them using the ResultsReader\n    reader = results.ResultsReader(md5List)\n    for item in reader:\n        if(item[\"md5\"] == \"none\"):\n            helper.log_info(\"STOP: No queued MD5\")\n            break\n        helper.log_info(\"Checking Zscaler Sandbox for MD5 : %s\" % item[\"md5\"])\n        quota = z.check_sandbox_quota()\n        #print(quota)\n        helper.log_info(\"Sandbox current quota : %s\" % quota)\n\n        while quota['unused'] <= 0:\n            quota = z.check_sandbox_quota()\n            helper.log_info(\"waiting 1 sec...\\tquota_left[\" + str(quota['unused']) + \"']\")\n            \n            time.sleep(1)\n\n        helper.log_info(\"Loading Zscaler Sandbox for MD5 : %s\" % item[\"md5\"])\n        report = z.get_sandbox_report(item[\"md5\"], \"full\")\n        #helper.log_info(\"Sandbox REPORT : %s\" % report.text)\n        #print(item[\"md5\"])\n        #event = Event()\n        #event.stanza = input_name\n        #event.data = report.text\n        \n        if (\"Please try again later\" in report.text):\n            helper.log_info(\"Sandbox REPORT for MD5(\" + item[\"md5\"]  + \"): \" + report.text)\n        else:\n            event = helper.new_event(report.text)\n            ew.write_event(event)\n\n", "customized_options": [{"name": "cloud", "value": "zscaler"}, {"name": "global_account", "value": ""}], "uuid": "39fa51e15d3445269f8bb03639987a35", "sample_count": 0}]}, "field_extraction_builder": {"zscalerapi-zia-audit": {"is_parsed": true, "data_format": "json"}, "zscalerapi-zia-sandbox": {"data_format": "json"}, "zscalerlss-zpa-app": {"data_format": "json"}, "zscalerlss-zpa-auth": {"data_format": "unstructured_data"}, "zscalerlss-zpa-bba": {"data_format": "json"}, "zscalerlss-zpa-connector": {"data_format": "json"}, "zscalernss-alerts": {"data_format": "tabular", "table_results": {"delim": " "}}, "zscalernss-casb": {"data_format": "tabular", "table_results": {"delim": "\\t"}}, "zscalernss-dns": {"data_format": "kv"}, "zscalernss-fw": {"data_format": "kv"}, "zscalernss-tunnel": {"data_format": "unstructured_data"}, "zscalernss-web": {"data_format": "tabular", "table_results": {"delim": "\\t"}}, "zscaler-dlpir": {"data_format": "tabular", "table_results": {"delim": ","}}, "zscalerapi-zws": {"data_format": "json"}, "zscalersmokescreen-audit": {"data_format": "json"}, "zscalersmokescreen-events": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {"log_level": "DEBUG"}, "credential_settings": [], "customized_settings": [{"required": true, "name": "username", "label": "Username", "default_value": "", "placeholder": "", "help_string": "Enter the username for this account.", "type": "text", "format_type": "text", "value": ""}, {"required": true, "name": "password", "label": "Password", "placeholder": "", "default_value": "", "help_string": "Enter the password for this account.", "type": "password", "format_type": "password", "value": ""}, {"required": true, "name": "api_key", "label": "API key", "placeholder": "", "default_value": "", "help_string": "Enter the API key for this account.", "type": "password", "format_type": "password", "value": ""}]}}, "sourcetype_builder": {"zscalerapi-zia-sandbox": {"metadata": {"event_count": 0, "data_input_name": "zscaler_sandbox_events", "extractions_count": 0, "cims_count": 0}}, "zscalerapi-zia-audit": {"metadata": {"event_count": 0, "data_input_name": "zscaler_audit_logs", "extractions_count": 0, "cims_count": 0}}}, "validation": {}}